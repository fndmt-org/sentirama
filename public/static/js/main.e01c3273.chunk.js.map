{"version":3,"sources":["components/Session/context.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/Session/withAuthentication.js","components/Session/withAuthorization.js","constants/routes.js","components/SignOut/index.js","components/Navigation/index.js","components/Landing/messageList.js","components/Landing/index.js","components/SignUp/index.js","components/PasswordForget/index.js","components/SignIn/index.js","components/Home/index.js","components/PasswordChange/index.js","components/Account/index.js","components/Admin/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["AuthUserContext","React","createContext","FirebaseContext","withFirebase","Component","props","Consumer","firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","doAddMessage","name","message","date","Date","messages","push","set","uid","db","ref","user","users","app","initializeApp","this","database","withAuthentication","WithAuthentication","state","authUser","listener","onAuthStateChanged","setState","Provider","value","withAuthorization","condition","WithAuthorization","history","compose","withRouter","type","onClick","NavigationAuth","to","SignOut","NavigationNonAuth","Navigation","MessageItem","MessagesList","map","item","key","MessagesPage","loading","off","on","snapshot","messagesList","messagesObject","val","Object","keys","INITIAL_STATE","error","AddMessaageBase","onSubmit","event","then","catch","preventDefault","onChange","target","console","log","isInvalid","placeholder","disabled","Landing","LandingPage","username","passwordOne","passwordTwo","SignUpFormBase","SignUpLink","SignUpForm","SignUpPage","PasswordForgetFormBase","PasswordForgetLink","PasswordForgetPage","PasswordForgetForm","SignInFormBase","SignInForm","SignInPage","PasswordChangeForm","PasswordChange","UserList","AdminPage","usersObject","usersList","GlobalStyle","createGlobalStyle","theme","fontFamily","dark","Fragment","exact","path","component","HomePage","AccountPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e01c3273.chunk.js","sourcesContent":["import React from 'react';\nconst AuthUserContext = React.createContext(null);\nexport default AuthUserContext;","import React from 'react';\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = Component => props => (\n    <FirebaseContext.Consumer>\n        {firebase => <Component {...props} firebase={firebase} />}\n    </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;","import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst config = {\n    apiKey: \"AIzaSyBz9WIj8SHoc9F2l9Uz2BipbTbM_iGRY4w\",\n    authDomain: \"corona-mood.firebaseapp.com\",\n    databaseURL: \"https://corona-mood.firebaseio.com\",\n    projectId: \"corona-mood\",\n    storageBucket: \"corona-mood.appspot.com\",\n    messagingSenderId: \"915912794570\",\n    appId: \"1:915912794570:web:ba18ea9f96b8ea0981af33\",\n    measurementId: \"G-PKF0ZEL622\"\n  };\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n        this.auth = app.auth();\n        this.db = app.database();\n    }\n    // *** Auth API ***\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password);\n\n    doAddMessage = (name, message) => {\n        const date = new Date();\n        return this.messages().push().set({\n                        message,\n                        name,\n                        date: date,\n                    });\n    };\n\n    // *** Message API ***\n    message = uid => this.db.ref(`message/${uid}`);\n    messages = () => this.db.ref('messages');\n\n    // *** User API ***\n    user = uid => this.db.ref(`users/${uid}`);\n    users = () => this.db.ref('users');\n}\nexport default Firebase;\n","import FirebaseContext, { withFirebase } from './context';\n\nimport Firebase from './firebase';\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };","import React from 'react';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\nconst withAuthentication = Component => {\n    class WithAuthentication extends React.Component {\n\n        constructor(props) {\n            super(props);\n            this.state = {\n                authUser: null,\n            };\n        }\n        componentDidMount() {\n            this.listener = this.props.firebase.auth.onAuthStateChanged(\n                authUser => {\n                    authUser\n                        ? this.setState({ authUser })\n                        : this.setState({ authUser: null });\n                },\n            );\n        }\n        componentWillUnmount() {\n            this.listener();\n        }\n        render() {\n            return (\n                <AuthUserContext.Provider value={this.state.authUser}>\n                    <Component {...this.props} />\n                </AuthUserContext.Provider>\n            );\n        }\n    }\n    return withFirebase(WithAuthentication);\n};\nexport default withAuthentication;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst withAuthorization = condition => Component => {\n    class WithAuthorization extends React.Component {\n        componentDidMount() {\n            this.listener = this.props.firebase.auth.onAuthStateChanged(\n                authUser => {\n                    if (!condition(authUser)) {\n                        this.props.history.push(ROUTES.SIGN_IN);\n                    }\n                },\n            );\n        }\n        componentWillUnmount() {\n            this.listener();\n        }\n        render() {\n            return (\n                <AuthUserContext.Consumer>\n                    {authUser =>\n                        condition(authUser) ? <Component {...this.props} /> : null\n                    }\n                </AuthUserContext.Consumer>\n            );\n        }\n    }\n    return compose(\n        withRouter,\n        withFirebase,\n    )(WithAuthorization);\n};\nexport default withAuthorization;","export const LANDING = '/';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const HOME = '/home';\nexport const ACCOUNT = '/account';\nexport const ADMIN = '/admin';\nexport const PASSWORD_FORGET = '/pw-forget';","import React from 'react';\nimport { withFirebase } from '../Firebase';\nconst SignOutButton = ({ firebase }) => (\n    <button type=\"button\" onClick={firebase.doSignOut}>\n        Sign Out\n  </button>\n);\nexport default withFirebase(SignOutButton);","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { AuthUserContext } from '../Session';\nimport SignOutButton from '../SignOut';\n\nimport * as ROUTES from '../../constants/routes';\n\nconst Navigation = () => (\n    <AuthUserContext.Consumer>\n        {authUser => authUser ? <NavigationAuth /> : <NavigationNonAuth />}\n    </AuthUserContext.Consumer>\n\n);\n\nconst NavigationAuth = () => (\n    <ul>\n        <li>\n            <Link to={ROUTES.LANDING}>Landing</Link>\n        </li>\n        <li>\n            <Link to={ROUTES.HOME}>Home</Link>\n        </li>\n        <li>\n            <Link to={ROUTES.ACCOUNT}>Account</Link>\n        </li>\n        <li>\n            <Link to={ROUTES.ADMIN}>Admin</Link>\n        </li>\n        <li>\n            <SignOutButton />\n        </li>\n    </ul>\n);\n\nconst NavigationNonAuth = () => (\n    <ul>\n        <li>\n            <Link to={ROUTES.LANDING}>Landing</Link>\n        </li>\n        <li>\n            <Link to={ROUTES.SIGN_IN}>Sign In</Link>\n        </li>\n    </ul>\n);\n\nexport default Navigation;","import React, { Component } from 'react';\nimport { withFirebase } from '../Firebase';\n\nconst MessageItem = ({name, message}) => (\n    <div>\n        <label>{name}</label>\n        <span>{message}</span>\n    </div>\n)\n\nconst MessagesList = ({ messages }) => (\n    <ul>\n        {messages.map(item => (\n            <li key={item.uid}>\n                <MessageItem {...item}/>\n            </li>\n        ))}\n    </ul>\n);\n\nclass MessagesPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            messages: [],\n        };\n    }\n\n    componentWillUnmount() {\n        this.props.firebase.messages().off();\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true });\n        this.props.firebase.messages().on('value', snapshot => {\n            const messagesObject = snapshot.val();\n            let messagesList;\n            if (messagesObject){\n                messagesList = Object.keys(messagesObject).map(key => ({\n                    ...messagesObject[key],\n                    uid: key,\n                }));\n            }\n            this.setState({\n                messages: messagesList,\n                loading: false,\n            });\n        });\n    }\n\n    render() {\n        const { messages, loading } = this.state;\n        return (\n            <div>\n                {loading && <div>Loading ...</div>}\n                {messages && <MessagesList messages={messages} />}\n            </div>\n        );\n    }\n}\n\nexport default withFirebase(MessagesPage);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\nimport MessageList from './messageList';\n\n\nconst LandingPage = () => (\n    <div>\n        <h1>Your mood today</h1>\n        <Landing />\n        <MessageList />\n    </div>\n);\n\nconst INITIAL_STATE = {\n    name: '',\n    message: '',\n    error: null,\n};\n\nclass AddMessaageBase extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = event => {\n        const { name, message } = this.state;\n        this.props.firebase\n            .doAddMessage(name, message)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n                // this.props.history.push(ROUTES.HOME);\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n        event.preventDefault();\n    };\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    render() {\n        console.log(this.props);\n\n        const { name, message, error } = this.state;\n        const isInvalid = message === '' || name === '';\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    name=\"name\"\n                    value={name}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Your name/nikname please\"\n                />\n            <textarea\n                name=\"message\"\n                placeholder=\"Your mood today\"\n                onChange={this.onChange}\n                value={message}>\n            </textarea>\n                <button disabled={isInvalid} type=\"submit\">add</button>\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\n\nconst Landing = compose(\n    withRouter,\n    withFirebase,\n)(AddMessaageBase);\n\nexport default LandingPage;\nexport { Landing };\n\n\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst SignUpPage = () => (\n    <div>\n        <h1>SignUp</h1>\n        <SignUpForm />\n    </div>\n);\n\nconst INITIAL_STATE = {\n    username: '',\n    email: '',\n    passwordOne: '',\n    passwordTwo: '',\n    error: null,\n};\n\nclass SignUpFormBase extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { ...INITIAL_STATE };\n    }\n    onSubmit = event => {\n        const { username, email, passwordOne } = this.state;\n        this.props.firebase\n            .doCreateUserWithEmailAndPassword(email, passwordOne)\n            .then(authUser => {\n                // Create a user in your Firebase realtime database\n                return this.props.firebase\n                    .user(authUser.user.uid)\n                    .set({\n                        username,\n                        email,\n                    });\n            })\n            .then(authUser => {\n                this.setState({ ...INITIAL_STATE });\n                this.props.history.push(ROUTES.HOME);\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n        event.preventDefault();\n    }\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n        const {\n            username,\n            email,\n            passwordOne,\n            passwordTwo,\n            error,\n        } = this.state;\n        const isInvalid =\n            passwordOne !== passwordTwo ||\n            passwordOne === '' ||\n            email === '' ||\n            username === '';\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    name=\"username\"\n                    value={username}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Full Name\"\n                />\n                <input\n                    name=\"email\"\n                    value={email}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Email Address\"\n                />\n                <input\n                    name=\"passwordOne\"\n                    value={passwordOne}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                />\n                <input\n                    name=\"passwordTwo\"\n                    value={passwordTwo}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    placeholder=\"Confirm Password\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Sign Up</button>\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\n\nconst SignUpLink = () => (\n    <p>\n        Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign Up</Link>\n    </p>\n);\n\nconst SignUpForm = compose(\n    withRouter,\n    withFirebase,\n)(SignUpFormBase);\n\nexport default SignUpPage;\nexport { SignUpForm, SignUpLink };","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\nconst PasswordForgetPage = () => (\n    <div>\n        <h1>PasswordForget</h1>\n        <PasswordForgetForm />\n    </div>\n);\nconst INITIAL_STATE = {\n    email: '',\n    error: null,\n};\nclass PasswordForgetFormBase extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { ...INITIAL_STATE };\n    }\n    onSubmit = event => {\n        const { email } = this.state;\n        this.props.firebase\n            .doPasswordReset(email)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n        event.preventDefault();\n    };\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    render() {\n        const { email, error } = this.state;\n        const isInvalid = email === '';\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    name=\"email\"\n                    value={this.state.email}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Email Address\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Reset My Password\n        </button>\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\nconst PasswordForgetLink = () => (\n    <p>\n        <Link to={ROUTES.PASSWORD_FORGET}>Forgot Password?</Link>\n    </p>\n);\nexport default PasswordForgetPage;\nconst PasswordForgetForm = withFirebase(PasswordForgetFormBase);\nexport { PasswordForgetForm, PasswordForgetLink };","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport { SignUpLink } from '../SignUp';\nimport { withFirebase } from '../Firebase';\nimport { PasswordForgetLink } from '../PasswordForget';\nimport * as ROUTES from '../../constants/routes';\n\nconst SignInPage = () => (\n    <div>\n        <h1>SignIn</h1>\n        <SignInForm />\n        <PasswordForgetLink />\n        <SignUpLink />\n    </div>\n);\n\nconst INITIAL_STATE = {\n    email: '',\n    password: '',\n    error: null,\n};\n\nclass SignInFormBase extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = event => {\n        const { email, password } = this.state;\n        this.props.firebase\n            .doSignInWithEmailAndPassword(email, password)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n                this.props.history.push(ROUTES.HOME);\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n        event.preventDefault();\n    };\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    render() {\n        const { email, password, error } = this.state;\n        const isInvalid = password === '' || email === '';\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    name=\"email\"\n                    value={email}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Email Address\"\n                />\n                <input\n                    name=\"password\"\n                    value={password}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Sign In\n        </button>\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\nconst SignInForm = compose(\n    withRouter,\n    withFirebase,\n)(SignInFormBase);\nexport default SignInPage;\nexport { SignInForm };\n","import React from 'react';\nimport { withAuthorization } from '../Session';\n\nconst HomePage = () => (\n    <div>\n        <h1>Home</h1>\n        <p>The Home Page is accessible by every signed in user.</p>\n    </div>\n);\n\nconst condition = authUser => !!authUser;\nexport default withAuthorization(condition)(HomePage);","import React, { Component } from 'react';\nimport { withFirebase } from '../Firebase';\nconst INITIAL_STATE = {\n    passwordOne: '',\n    passwordTwo: '',\n    error: null,\n};\nclass PasswordChangeForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { ...INITIAL_STATE };\n    }\n    onSubmit = event => {\n        const { passwordOne } = this.state;\n        this.props.firebase\n            .doPasswordUpdate(passwordOne)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n        event.preventDefault();\n    };\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n    render() {\n        const { passwordOne, passwordTwo, error } = this.state;\n        const isInvalid =\n            passwordOne !== passwordTwo || passwordOne === '';\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    name=\"passwordOne\"\n                    value={passwordOne}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    placeholder=\"New Password\"\n                />\n                <input\n                    name=\"passwordTwo\"\n                    value={passwordTwo}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    placeholder=\"Confirm New Password\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Reset My Password\n        </button>\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\nexport default withFirebase(PasswordChangeForm);","import React from 'react';\n\nimport { AuthUserContext, withAuthorization } from '../Session';\nimport { PasswordForgetForm } from '../PasswordForget';\nimport PasswordChangeForm from '../PasswordChange';\n\n\nconst AccountPage = () => (\n    <AuthUserContext.Consumer>\n        {authUser => (\n            <div>\n                <h1>Account: {authUser.email}</h1>\n                <PasswordForgetForm />\n                <PasswordChangeForm />\n            </div>\n        )}\n    </AuthUserContext.Consumer>\n);\nconst condition = authUser => !!authUser;\nexport default withAuthorization(condition)(AccountPage);\n","import React, { Component } from 'react';\nimport { withFirebase } from '../Firebase';\n\nconst UserList = ({ users }) => (\n    <ul>\n        {users.map(user => (\n            <li key={user.uid}>\n                <span>\n                    <strong>ID:</strong> {user.uid}\n                </span>\n                <span>\n                    <strong>E-Mail:</strong> {user.email}\n                </span>\n                <span>\n                    <strong>Username:</strong> {user.username}\n                </span>\n            </li>\n        ))}\n    </ul>\n);\n\nclass AdminPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            users: [],\n        };\n    }\n\n    componentWillUnmount() {\n        this.props.firebase.users().off();\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true });\n        this.props.firebase.users().on('value', snapshot => {\n            const usersObject = snapshot.val();\n            const usersList = Object.keys(usersObject).map(key => ({\n                ...usersObject[key],\n                uid: key,\n            }));\n\n            this.setState({\n                users: usersList,\n                loading: false,\n            });\n        });\n    }\n\n    render() {\n        const { users, loading } = this.state;\n\n        return (\n            <div>\n                <h1>Admin</h1>\n\n                {loading && <div>Loading ...</div>}\n                <UserList users={users} />\n            </div>\n        );\n    }\n}\nexport default withFirebase(AdminPage);","import React from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\nimport {\n    BrowserRouter as Router,\n    Route\n} from 'react-router-dom';\n\nimport { AuthUserContext } from '../Session';\nimport Navigation from '../Navigation';\nimport LandingPage from '../Landing';\nimport SignUpPage from '../SignUp';\nimport SignInPage from '../SignIn';\nimport PasswordForgetPage from '../PasswordForget';\nimport HomePage from '../Home';\nimport AccountPage from '../Account';\nimport AdminPage from '../Admin';\nimport { withAuthentication } from '../Session';\n\nimport * as ROUTES from '../../constants/routes';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: ${props => props.theme.fontFamily};\n    color: ${props => (props.dark ? 'white' : 'black')};\n    background: ${props => (props.dark ? 'black' : 'white')};\n  }\n`\n\nconst App = () => (\n    <ThemeProvider theme={{ fontFamily: 'Helvetica Neue' }}>\n        <GlobalStyle />\n        <React.Fragment>\n            <Router>\n                <Navigation />\n                <hr />\n                <Route exact path={ROUTES.LANDING} component={LandingPage} />\n                <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\n                <Route path={ROUTES.SIGN_IN} component={SignInPage} />\n                <Route path={ROUTES.PASSWORD_FORGET} component={PasswordForgetPage} />\n                <Route path={ROUTES.HOME} component={HomePage} />\n                <Route path={ROUTES.ACCOUNT} component={AccountPage} />\n                <Route path={ROUTES.ADMIN} component={AdminPage} />\n            </Router>\n        </React.Fragment>\n    </ThemeProvider>\n);\n\nexport default withAuthentication(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport Firebase, { FirebaseContext } from './components/Firebase';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <FirebaseContext.Provider value={new Firebase()}>\n        <App />\n    </FirebaseContext.Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}